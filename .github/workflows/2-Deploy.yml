name: "2 - Deploy"
on:
  workflow_run:
    workflows: ["1 - Provisioning Environment"]
    branches: [main]
    types: 
      - completed   

jobs:
    build:
        
        runs-on: ubuntu-latest
        env:
          DOCKER_REPOSITORY: richiebono
          IMAGE_NAME: k8s-test
          IMAGE_TAG: ${{github.run_number}}
          WORKING_DIRECTORY: .
          CLUSTER_NAME: bono-k8s-test
          CLUSTER_REGION: us-east-1

        defaults:
          run:
            shell: bash
            working-directory: ${{ env.WORKING_DIRECTORY }}

        steps:
        - name: Checkout Code
          uses: actions/checkout@v2

        - name: QEMU
          uses: docker/setup-qemu-action@v1

        - name: Docker Buildx
          uses: docker/setup-buildx-action@v1

        - name: Login to DockerHub
          uses: docker/login-action@v1 
          with:
            username: ${{ env.DOCKER_REPOSITORY }}
            password: ${{ secrets.DOCKER_PASSWORD }}
        
        - name: Build Docker Image 1 ${{ env.IMAGE_NAME }}1
          run: docker build -f server1/Dockerfile -t ${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}1:${{ env.IMAGE_TAG }} -t ${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}1:latest .
          
        - name: Push Docker Image 1 ${{ env.IMAGE_NAME }}1
          run: docker push ${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}1
        
        # - name: Build Docker Image 2 ${{ env.IMAGE_NAME }}2
        #   run: docker build -f server2/Dockerfile -t ${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}2:${{ env.IMAGE_TAG }} -t ${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}2:latest .
          
        # - name: Push Docker Image 2 ${{ env.IMAGE_NAME }}2
        #   run: docker push ${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}2

        # - name: Build Docker Image 3 ${{ env.IMAGE_NAME }}3
        #   run: docker build -f server3/Dockerfile -t ${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}3:${{ env.IMAGE_TAG }} -t ${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}3:latest .
          
        # - name: Push Docker Image 3 ${{ env.IMAGE_NAME }}3
        #   run: docker push ${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}3

        # - name: Build Docker Image 4 ${{ env.IMAGE_NAME }}4
        #   run: docker build -f server4/Dockerfile -t ${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}4:${{ env.IMAGE_TAG }} -t ${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}4:latest .
          
        # - name: Push Docker Image 4 ${{ env.IMAGE_NAME }}4
        #   run: docker push ${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}4

        - name: Install kubectl
          uses: azure/setup-kubectl@v1
          with:
            version: 'v1.21.3'
          id: install

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.CLUSTER_REGION }}

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

        - name: Update kube config
          run: aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }}

        - name: Deploy image server 1 to Amazon EKS
          run: |                    
            kubectl apply -f k8s/server1/deployment.yaml
            kubectl apply -f k8s/server1/service.yaml 

        - name: Deploy image server 2 to Amazon EKS
          run: |           
            kubectl apply -f k8s/server2/deployment.yaml
            kubectl apply -f k8s/server2/service.yaml 

        # - name: Deploy image server 2 to Amazon EKS
        #   run: |           
        #     kubectl apply -f k8s/server3/deployment.yaml
        #     kubectl apply -f k8s/server3/service.yaml 

        # - name: Deploy image server 4 to Amazon EKS
        #   run: |           
        #     kubectl apply -f k8s/server4/deployment.yaml
        #     kubectl apply -f k8s/server4/service.yaml 

        - name: List kube nodes
          run: kubectl get svc